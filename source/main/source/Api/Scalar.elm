-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Scalar exposing (Codecs, DateTime(..), FileHash(..), Url(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type DateTime
    = DateTime String


type FileHash
    = FileHash String


type Url
    = Url String


defineCodecs :
    { codecDateTime : Codec valueDateTime
    , codecFileHash : Codec valueFileHash
    , codecUrl : Codec valueUrl
    }
    -> Codecs valueDateTime valueFileHash valueUrl
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDateTime valueFileHash valueUrl
    ->
        { codecDateTime : Codec valueDateTime
        , codecFileHash : Codec valueFileHash
        , codecUrl : Codec valueUrl
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDateTime valueFileHash valueUrl
    = Codecs (RawCodecs valueDateTime valueFileHash valueUrl)


type alias RawCodecs valueDateTime valueFileHash valueUrl =
    { codecDateTime : Codec valueDateTime
    , codecFileHash : Codec valueFileHash
    , codecUrl : Codec valueUrl
    }


defaultCodecs : RawCodecs DateTime FileHash Url
defaultCodecs =
    { codecDateTime =
        { encoder = \(DateTime raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map DateTime
        }
    , codecFileHash =
        { encoder = \(FileHash raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map FileHash
        }
    , codecUrl =
        { encoder = \(Url raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Url
        }
    }
