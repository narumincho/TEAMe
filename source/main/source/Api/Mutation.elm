-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Mutation exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias GetLineLogInUrlRequiredArguments =
    { path : String }


{-| 新規登録かログインするためのURLを得る。受け取ったURLをlocation.hrefに代入するとかして、各サービスの認証画面へ

  - path - ログインして返ってくるURLのパス

-}
getLineLogInUrl : GetLineLogInUrlRequiredArguments -> SelectionSet Api.ScalarCodecs.Url RootMutation
getLineLogInUrl requiredArgs =
    Object.selectionForField "ScalarCodecs.Url" "getLineLogInUrl" [ Argument.required "path" requiredArgs.path Encode.string ] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecUrl |> .decoder)


type alias CreateTeamAndSetManagerRoleRequiredArguments =
    { accessToken : String
    , teamName : String
    }


{-| 監督としてチームを登録する

  - accessToken - アクセストークン
  - teamName - チーム名

-}
createTeamAndSetManagerRole : CreateTeamAndSetManagerRoleRequiredArguments -> SelectionSet decodesTo Api.Object.UserData -> SelectionSet decodesTo RootMutation
createTeamAndSetManagerRole requiredArgs object_ =
    Object.selectionForCompositeField "createTeamAndSetManagerRole" [ Argument.required "accessToken" requiredArgs.accessToken Encode.string, Argument.required "teamName" requiredArgs.teamName Encode.string ] object_ identity


type alias JoinTeamAndSetPlayerRoleRequiredArguments =
    { accessToken : String
    , teamId : String
    }


{-| 選手としてチームに参加する

  - accessToken - アクセストークン
  - teamId - チームID

-}
joinTeamAndSetPlayerRole : JoinTeamAndSetPlayerRoleRequiredArguments -> SelectionSet decodesTo Api.Object.UserData -> SelectionSet decodesTo RootMutation
joinTeamAndSetPlayerRole requiredArgs object_ =
    Object.selectionForCompositeField "joinTeamAndSetPlayerRole" [ Argument.required "accessToken" requiredArgs.accessToken Encode.string, Argument.required "teamId" requiredArgs.teamId Encode.string ] object_ identity


type alias UpdatePersonalGoalRequiredArguments =
    { accessToken : String
    , goal : String
    }


{-| 個人目標か指導目標を変更する

  - accessToken - アクセストークン
  - goal - 目標

-}
updatePersonalGoal : UpdatePersonalGoalRequiredArguments -> SelectionSet decodesTo Api.Object.UserData -> SelectionSet decodesTo RootMutation
updatePersonalGoal requiredArgs object_ =
    Object.selectionForCompositeField "updatePersonalGoal" [ Argument.required "accessToken" requiredArgs.accessToken Encode.string, Argument.required "goal" requiredArgs.goal Encode.string ] object_ identity


type alias UpdateTeamGoalRequiredArguments =
    { accessToken : String
    , goal : String
    }


{-| チーム目標を変更する。変更できるのはチームの指導者か、選手である必要がある

  - accessToken - アクセストークン
  - goal - 目標

-}
updateTeamGoal : UpdateTeamGoalRequiredArguments -> SelectionSet decodesTo Api.Object.Team -> SelectionSet decodesTo RootMutation
updateTeamGoal requiredArgs object_ =
    Object.selectionForCompositeField "updateTeamGoal" [ Argument.required "accessToken" requiredArgs.accessToken Encode.string, Argument.required "goal" requiredArgs.goal Encode.string ] object_ identity


type alias CreateCycleRequiredArguments =
    { accessToken : String
    , plan : String
    , do : String
    , check : String
    , act : String
    }


{-| 新しいCycleを作成する

  - accessToken - アクセストークン
  - plan - Plan
  - do - Do
  - check - Check
  - act - Act

-}
createCycle : CreateCycleRequiredArguments -> SelectionSet decodesTo Api.Object.Cycle -> SelectionSet decodesTo RootMutation
createCycle requiredArgs object_ =
    Object.selectionForCompositeField "createCycle" [ Argument.required "accessToken" requiredArgs.accessToken Encode.string, Argument.required "plan" requiredArgs.plan Encode.string, Argument.required "do" requiredArgs.do Encode.string, Argument.required "check" requiredArgs.check Encode.string, Argument.required "act" requiredArgs.act Encode.string ] object_ identity
